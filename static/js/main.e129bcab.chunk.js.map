{"version":3,"sources":["utils/Loadable.js","components/LoadingIndicator/Circle.js","components/LoadingIndicator/Wrapper.js","components/LoadingIndicator/index.js","views/HomePage/Loadable.js","global-styles.js","containers/App.js","serviceWorker.js","utils/history.js","index.js"],"names":["loadable","importFunc","fallback","LazyComponent","lazy","props","circleFadeDelay","keyframes","Circle","CirclePrimitive","styled","div","rotate","delay","Wrapper","LoadingIndicator","GlobalStyle","createGlobalStyle","NoMatch","to","AppWrapper","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","Helmet","titleTemplate","defaultTitle","name","content","exact","path","component","HomePage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYeA,EAVE,SAACC,GAA0D,IAAD,yDAAvB,CAAEC,SAAU,MAAW,IAA3CA,gBAA2C,MAAhC,KAAgC,EACnEC,EAAgBC,eAAKH,GAE3B,OAAO,SAAAI,GAAK,OACV,kBAAC,WAAD,CAAUH,SAAUA,GAClB,kBAACC,EAAkBE,M,0jBCHzB,IAAMC,EAAkBC,YAAH,KAgDNC,EApCA,SAAAH,GACb,IAAMI,EAAkBC,IAAOC,IAAV,IAMjBN,EAAMO,QAAN,4CAE4BP,EAAMO,OAFlC,8CAGwBP,EAAMO,OAH9B,0CAIoBP,EAAMO,OAJ1B,eAaaN,EACXD,EAAMQ,OAAN,6CAE2BR,EAAMQ,MAFjC,wCAGmBR,EAAMQ,MAHzB,eAON,OAAO,kBAACJ,EAAD,O,oJC1CT,IAOeK,EAPCJ,IAAOC,IAAV,KCoBEI,EAjBU,kBACvB,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQH,OAAQ,GAAIC,OAAQ,MAC5B,kBAAC,EAAD,CAAQD,OAAQ,GAAIC,OAAQ,IAC5B,kBAAC,EAAD,CAAQD,OAAQ,GAAIC,OAAQ,KAC5B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,KAC7B,kBAAC,EAAD,CAAQD,OAAQ,IAAKC,OAAQ,OCVlBb,KAAS,kBAAM,sDAAsB,CAClDE,SAAU,kBAAC,EAAD,Q,slBCPZ,IA+Bec,EA/BKC,YAAH,K,+LCejB,IAAMC,EAAU,kBACd,6BACE,gCACE,yDACA,kCACA,8DACA,2EACmD,IACjD,kBAAC,OAAD,CAAMC,GAAG,KAAT,8BAFF,QAQAC,EAAaV,IAAOC,IAAV,KCnBIU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBSC,EADCC,c,MCQhBC,IAASC,OACP,kBAAC,IAAD,CAAQH,QAASA,GACf,mBH6BW,WACb,OACE,kBAACN,EAAD,KACE,kBAACU,EAAA,OAAD,CAAQC,cAAc,KAAKC,aAAa,QACtC,0BACEC,KAAK,cACLC,QAAQ,6WAGZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOD,UAAWnB,KAEpB,kBAAC,EAAD,SG1CF,OAEFqB,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e129bcab.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\nconst loadable = (importFunc, { fallback = null } = { fallback: null }) => {\n  const LazyComponent = lazy(importFunc);\n\n  return props => (\n    <Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\nexport default loadable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { keyframes } from 'styled-components';\n\nconst circleFadeDelay = keyframes`\n  0%,\n  39%,\n  100% {\n    opacity: 0;\n  }\n\n  40% {\n    opacity: 1;\n  }\n`;\n\nconst Circle = props => {\n  const CirclePrimitive = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    ${props.rotate &&\n      `\n      -webkit-transform: rotate(${props.rotate}deg);\n      -ms-transform: rotate(${props.rotate}deg);\n      transform: rotate(${props.rotate}deg);\n    `} &:before {\n      content: '';\n      display: block;\n      margin: 0 auto;\n      width: 15%;\n      height: 15%;\n      background-color: #999;\n      border-radius: 100%;\n      animation: ${circleFadeDelay} 1.2s infinite ease-in-out both;\n      ${props.delay &&\n        `\n        -webkit-animation-delay: ${props.delay}s;\n        animation-delay: ${props.delay}s;\n      `};\n    }\n  `;\n  return <CirclePrimitive />;\n};\n\nCircle.propTypes = {\n  delay: PropTypes.number,\n  rotate: PropTypes.number,\n};\n\nexport default Circle;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin: 2em auto;\n  width: 40px;\n  height: 40px;\n  position: relative;\n`;\n\nexport default Wrapper;\n","import React from 'react';\n\nimport Circle from './Circle';\nimport Wrapper from './Wrapper';\n\nconst LoadingIndicator = () => (\n  <Wrapper>\n    <Circle />\n    <Circle rotate={30} delay={-1.1} />\n    <Circle rotate={60} delay={-1} />\n    <Circle rotate={90} delay={-0.9} />\n    <Circle rotate={120} delay={-0.8} />\n    <Circle rotate={150} delay={-0.7} />\n    <Circle rotate={180} delay={-0.6} />\n    <Circle rotate={210} delay={-0.5} />\n    <Circle rotate={240} delay={-0.4} />\n    <Circle rotate={270} delay={-0.3} />\n    <Circle rotate={300} delay={-0.2} />\n    <Circle rotate={330} delay={-0.1} />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from '../../utils/Loadable';\nimport LoadingIndicator from '../../components/LoadingIndicator';\n\nexport default loadable(() => import('./HomeBody'), {\n  fallback: <LoadingIndicator />,\n});\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n    max-width: 100%;\n    // overflow-x: hidden;\n    line-height: 1.5;\n  }\n\n  body {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n\n  body.fontLoaded {\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n\n  #app {\n    background-color: #fafafa;\n    min-height: 100%;\n    min-width: 100%;\n  }\n\n  p,\n  label {\n    font-family: Georgia, Times, 'Times New Roman', serif;\n    line-height: 1.5em;\n  }\n`;\n\nexport default GlobalStyle;\n","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport HomePage from '../views/HomePage/Loadable';\n\nimport GlobalStyle from '../global-styles';\n\nconst NoMatch = () => (\n  <div>\n    <center>\n      <h1>404 Error: Page Not Found</h1>\n      <h1>:o</h1>\n      <h2>Oops, this page doesn&#39;t exist!</h2>\n      <h3>\n        Maybe we&#39;ll make it one day, but for now try{' '}\n        <Link to=\"/\">returning to our Home Page</Link>.\n      </h3>\n    </center>\n  </div>\n);\n\nconst AppWrapper = styled.div`\n  max-width: 100vw;\n  margin: 0 0;\n  display: flex;\n  min-height: 100%;\n  padding: 0 0;\n  flex-direction: column;\n`;\n\nexport default function App() {\n  return (\n    <AppWrapper>\n      <Helmet titleTemplate=\"%s\" defaultTitle=\"Yeux\">\n        <meta\n          name=\"description\"\n          content=\"Yeux have big goals and we want to help you achieve them. We design and develop websites, mobile apps, social media automations and any other techincal solution you might need. Our goal is to support small minority-owned business using our expertise in web development, mobile app development, logo designs, SEO, marketing, and social media. Let us help yeux.\"\n        />\n      </Helmet>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route component={NoMatch} />\n      </Switch>\n      <GlobalStyle />\n    </AppWrapper>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom'\nimport history from './utils/history';\nimport 'sanitize.css/sanitize.css';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}